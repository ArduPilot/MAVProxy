"""Subclass of MainFrameBase, which is generated by wxFormBuilder."""

import wx
import gui
import subMAVFunctionSettings as MAVFSettingsAPI

# Implementing MainFrameBase
class VirtualEditDialog ( gui.VirtualDialogBase ):
	def __init__( self, parent, doc ):
		gui.VirtualDialogBase.__init__( self, parent )
		self.doc = doc

	# Handlers forevents.

	def m_FinishEdit( self, event ):
                print("Finish editing")
		gui.VirtualDialogBase.EndModal(self, 0)
		event.Skip()
		
	def m_initDialog(self, event ):
		self.updateCellsFromDatabase()
		event.Skip()

	def m_closeDialog(self, event ):
		self.putCellDataInDatabase()
		event.Skip()
		
	def m_OnSize(self, event ):
		frameSize = self.GetSize()
		gridSize = self.m_gridVirtual.GetMaxSize()

		gridSize.SetWidth(frameSize.GetWidth() - 5)
		gridSize.SetHeight(frameSize.GetHeight() - 5)
		self.m_gridVirtual.SetMaxSize(gridSize)
		self.m_gridVirtual.SetMinSize(gridSize)
		event.Skip()

	def on_gridCellChange(self, event):
		if( (event.GetRow() + 1) == self.m_gridVirtual.GetNumberRows()):
			self.m_gridVirtual.AppendRows(1)
			
		CellText = self.m_gridVirtual.GetCellValue(event.GetRow(), event.GetCol())
			
		if(self.doc.m_findRegisterIndexWithName(CellText) == -1):
			self.m_gridVirtual.SetCellTextColour(event.GetRow(), event.GetCol(), wx.TheColourDatabase.Find("red") )
		else:
			self.m_gridVirtual.SetCellTextColour(event.GetRow(), event.GetCol(), wx.TheColourDatabase.Find("black") )
		
		event.Skip()
		
	def updateCellsFromDatabase(self):
		self.m_gridVirtual.DeleteRows(0, self.m_gridVirtual.GetNumberRows())

		inputRowCount = len(self.doc.MAVFSettings.inputRegs.input)
		outputRowCount = len(self.doc.MAVFSettings.outputRegs.output)
			 
		if(inputRowCount > outputRowCount):
			rowCount = inputRowCount
		else:
			rowCount = outputRowCount
		self.m_gridVirtual.AppendRows(rowCount+1)
		
		index = 0
		for inputReg in self.doc.MAVFSettings.inputRegs.input:
			self.m_gridVirtual.SetCellValue( index, 0, inputReg.register )
			if(self.doc.m_findRegisterIndexWithName(inputReg.register) == -1):
				self.m_gridVirtual.SetCellTextColour(index,0, wx.TheColourDatabase.Find("red") )
			else:
				self.m_gridVirtual.SetCellTextColour(index,0, wx.TheColourDatabase.Find("black") )

			index += 1

		index = 0
		for outputReg in self.doc.MAVFSettings.outputRegs.output:
			self.m_gridVirtual.SetCellValue( index, 1, outputReg.register )
			if(self.doc.m_findRegisterIndexWithName(outputReg.register) == -1):
				self.m_gridVirtual.SetCellTextColour(index,1, wx.TheColourDatabase.Find("red") )
			else:
				self.m_gridVirtual.SetCellTextColour(index,1, wx.TheColourDatabase.Find("black") )
			index += 1
			
	def putCellDataInDatabase(self):
		self.doc.MAVFSettings.inputRegs.input = []
		
		index = 0
		endFound = False
		while( (index < self.m_gridVirtual.GetNumberRows()) and (endFound == False) ):
			CellText = self.m_gridVirtual.GetCellValue( index, 0 )
			if(CellText == ""):
				endFound = True
			else:
				inputReg = MAVFSettingsAPI.inputSub(CellText)
				self.doc.MAVFSettings.inputRegs.input.append(inputReg)
			index += 1
		
		self.doc.MAVFSettings.outputRegs.output = []

		index = 0
		endFound = False
		while( (index < self.m_gridVirtual.GetNumberRows()) and (endFound == False) ):
			CellText = self.m_gridVirtual.GetCellValue( index, 1 )
			if(CellText == ""):
				endFound = True
			else:
				outputReg = MAVFSettingsAPI.outputSub(CellText)
				self.doc.MAVFSettings.outputRegs.output.append(outputReg)
			index += 1
			

	


