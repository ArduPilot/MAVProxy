"""Subclass of MainFrameBase, which is generated by wxFormBuilder."""


import SubFunctionBlocks as FBlocksAPI
import subMAVFunctionSettings as MAVFSettingsAPI
import struct, array

import sys,os
#import scanwin32

def PercentToQ14(percent):
    try:
        val = float(percent)
    except:
        val = 0.0;
    return (int) (val * 163.84)

class function_settings_compact():
    def __init__(self, funcIndex = 0, funcData = '', funcSize = 0, funcAddress = 0):
        self.funcIndex      = funcIndex
        self.funcData       = funcData
        self.funcSize       = funcSize
        self.funcAddress    = funcAddress

class flexifunction_settings():
    def __init__(self, functionIndex = 0, funcTypeIndex = 0, actionIndex = 0, outRegister = 0, data = ''):
        self.functionIndex  = functionIndex
        self.funcTypeIndex  = funcTypeIndex
        self.actionIndex    = actionIndex
        self.outRegister    = outRegister
        self.data           = data
        
    def clear( self ):
        self.functionIndex  = 0
        self.funcTypeIndex  = 0
        self.actionIndex    = 0
        self.outRegister    = 0
        self.data           = ''


class structDataGen():
    def __init__( self, MAVFSettings, FBlocks):
        #self.MainFrame = MainFrame
        self.MAVFSettings = MAVFSettings
        self.registers = self.MAVFSettings.registers.register
        self.FSettings = self.MAVFSettings.functions.function
        self.FBlocks = FBlocks


    def m_findRegisterIndexWithName ( self, regName ):
        index = 0
        for item in self.registers:
            if regName == item.identifier:
                return index
            index = index + 1
        return -1
    

    def m_findTypeIndexWithName ( self, typeName ):
        print('Searching for function type ', typeName)
        index = 0
        for FBlock in self.FBlocks:
            if FBlock.header.name == typeName:
                return index
            index = index + 1
        return -1

    
    def FunctionsCount (self):
        return len(self.MAVFSettings.functions.function)


    def m_mavlinkFunctionGenerate (self, funcIndex):
        function = self.MAVFSettings.functions.function[funcIndex]
        destRegStr = function.header.destReg
        funcTypeStr = function.header.functionType
        funcAction = function.header.action
        regColumn = self.m_findRegisterIndexWithName(destRegStr)
        if regColumn == -1:
            print("ERROR: Could not find register with name " + destRegStr)
            return
        
        funcTypeIndex = self.m_findTypeIndexWithName( funcTypeStr )

        actionIndex = -1

        if funcAction == 'SET':
            actionIndex = 0
        elif funcAction == 'ADD':
            actionIndex = 1
        elif funcAction == 'CLEAR':
            actionIndex = 2

        settings = array.array('c')

        paramIndex = 0
        for parameter in function.setting:
            paramType = self.FBlocks[funcTypeIndex].setting[paramIndex].type_
            paramValue = self.MAVFSettings.functions.function[funcIndex].setting[paramIndex].value
            if paramType == 'Register':
                refIndex = self.m_findRegisterIndexWithName(parameter.value)
                if refIndex <> -1:
                    refVal = struct.pack("h", refIndex)
                    settings.append( refVal[0] )
                    settings.append( refVal[1] )
                else:
                    intVal = struct.pack("h", int(0) )
                    settings.append( intVal[0] )
                    settings.append( intVal[1] )
            elif paramType == 'Percent':
                Q16Val = PercentToQ14(paramValue)
                pctVal = struct.pack("h", Q16Val)
                settings.append( pctVal[0] )
                settings.append( pctVal[1] )
            elif paramType == 'int16':
                intVal = struct.pack("h", int(paramValue) )
                settings.append( intVal[0] )
                settings.append( intVal[1] )
            elif paramType == 'int14':
                intVal = struct.pack("h", int(paramValue) )
                settings.append( intVal[0] )
                settings.append( intVal[1] )
            paramIndex = paramIndex + 1

        settingsSize = len(settings)

        # Fill the remainder of the 48 bytes array buffer with zeros
        setsize = settings.count('c')
        for index in range(setsize, 49):
            settings.append(chr(0))
            
        strdata = "s"
        for index in range(0 , 47):
            strdata += settings[index]
               
        funcSettings = flexifunction_settings(funcIndex, funcTypeIndex, actionIndex, regColumn, strdata)
        return  funcSettings
    
    
    def m_FunctionGenerateStruct (self, funcIndex):
        function = self.MAVFSettings.functions.function[funcIndex]
        destRegStr = function.header.destReg
        funcTypeStr = function.header.functionType
        funcAction = function.header.action
        
        settings = array.array('c')
        
        funcTypeIndex = funcValue = self.m_findTypeIndexWithName( funcTypeStr )
        
        actionIndex = -1

        if funcAction == 'SET':
            actionIndex = 0
        elif funcAction == 'ADD':
            actionIndex = 1
        elif funcAction == 'CLEAR':
            actionIndex = 2
        else:
            actionIndex = 3
            
        funcValue += actionIndex << 6

        actVal = struct.pack("B", funcValue)
        settings.append( actVal[0] )

        destRegister = self.m_findRegisterIndexWithName(destRegStr)
        if destRegister == -1:
            print("ERROR: Could not find register with name " + destRegStr)
            print("Assuming NULL register")
            destRegister = 0
            return
        
        destVal = struct.pack("B", destRegister)
        settings.append( destVal[0] )

        paramIndex = 0
        for parameter in function.setting:
            paramType = self.FBlocks[funcTypeIndex].setting[paramIndex].type_
            paramValue = self.MAVFSettings.functions.function[funcIndex].setting[paramIndex].value
            if paramType == 'Register':
                refIndex = self.m_findRegisterIndexWithName(parameter.value)
                if refIndex <> -1:
                    refVal = struct.pack("h", refIndex)
                    settings.append( refVal[0] )
                    settings.append( refVal[1] )
                else:
                    intVal = struct.pack("h", int(0) )
                    settings.append( intVal[0] )
                    settings.append( intVal[1] )
            elif paramType == 'Percent':
                Q16Val = PercentToQ14(paramValue)
                pctVal = struct.pack("h", Q16Val)
                settings.append( pctVal[0] )
                settings.append( pctVal[1] )
            elif paramType == 'int16':
                intVal = struct.pack("h", int(paramValue) )
                settings.append( intVal[0] )
                settings.append( intVal[1] )
            elif paramType == 'int14':
                intVal = struct.pack("h", int(paramValue) )
                settings.append( intVal[0] )
                settings.append( intVal[1] )
            paramIndex = paramIndex + 1

        settingsSize = len(settings)

        # Fill the remainder of the 48 bytes array buffer with zeros
        setsize = settings.count('B')
        for index in range(setsize, 49):
            settings.append(chr(0))
            
        strdata = ''
        for index in range(0 , 47):
            strdata += settings[index]
            
        func_settings = function_settings_compact(funcIndex, strdata, settingsSize, 0)
               
        return  func_settings
    
    
    
    def m_mavlinkInputDirectory (self):
         directory = array.array('c')

         for inputReg in self.MAVFSettings.inputRegs.input:
            regIndex = self.m_findRegisterIndexWithName(inputReg.get_register())
            if(regIndex == -1):
                regIndex = 0
            Val = struct.pack("B", regIndex)
            directory.append(Val[0])
         return directory

    def m_mavlinkOutputDirectory (self):
        directory = array.array('c')
               
        for outputReg in self.MAVFSettings.outputRegs.output:
            regIndex = self.m_findRegisterIndexWithName(outputReg.get_register())
            if(regIndex == -1):
                regIndex = 0
            Val = struct.pack("B", regIndex)
            directory.append(Val[0])
        return directory
        