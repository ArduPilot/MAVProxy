environment:
  global:
    # SDK v7.0 MSVC Express 2008's SetEnv.cmd script will fail if the
    # /E:ON and /V:ON options are not enabled in the batch script intepreter
    # See: http://stackoverflow.com/a/13751649/163740
    CMD_IN_ENV: "cmd /E:ON /V:ON /C .\\appveyor\\run_with_env.cmd"

  matrix:
    # Pre-installed Python versions, which Appveyor may upgrade to
    # a later point release.
    # See: https://www.appveyor.com/docs/installed-software#python
    - PYTHON: "C:\\Python38"
      PYTHON_VERSION: "3.8.x"
      PYTHON_ARCH: "32"


install:
  # If there is a newer build queued for the same PR, cancel this one.
  # The AppVeyor 'rollout builds' option is supposed to serve the same
  # purpose but it is problematic because it tends to cancel builds pushed
  # directly to master instead of just PR builds (or the converse).
  # credits: JuliaLang developers.
  - ps: if ($env:APPVEYOR_PULL_REQUEST_NUMBER -and $env:APPVEYOR_BUILD_NUMBER -ne ((Invoke-RestMethod `
        https://ci.appveyor.com/api/projects/$env:APPVEYOR_ACCOUNT_NAME/$env:APPVEYOR_PROJECT_SLUG/history?recordsNumber=50).builds | `
        Where-Object pullRequestId -eq $env:APPVEYOR_PULL_REQUEST_NUMBER)[0].buildNumber) { `
          throw "There are newer queued builds for this pull request, failing early." }

  - SET PATH=%PYTHON%;%PATH%
    
  # Check that we have the expected version and architecture for Python
  - "python --version"
  - "python -c \"import struct; print(struct.calcsize('P') * 8)\""
  - "python -m pip install --upgrade pip"
  
  # Install the build dependencies of the project. If some dependencies contain
  # compiled extensions and are not provided as pre-built wheel packages,
  # pip will build them from source using the MSVC compiler matching the
  # target Python version and architecture
  - "python -m pip install -U pywin32 lxml pymavlink numpy matplotlib==3.2.2 pyserial opencv-python PyYAML Pygame Pillow wxpython"
  - "python -m pip install -U pyinstaller setuptools packaging --no-use-pep517"
  
  #We're using Inno Setup to build an installer
  - cinst -y InnoSetup
 
  
  #Debug for getting a list of what packages/version were used for this build
  - "python -m pip list"
  
build_script:
  # Build the compiled extension
  - "python setup.py build install"
  


test_script:
  # Run the project tests and store results in .xml log

      
after_test:
  # If tests are successful, create binary packages for the project.
  #run pyinstaller
  - "cd .\\MAVProxy"
  - "copy ..\\windows\\mavproxy.spec"
  - "%PYTHON%\\Scripts\\pyinstaller --clean mavproxy.spec"
  - "del mavproxy.spec"
  - "cd ..\\"
  
  #create version txt file
  - "cd  .\\windows\\"
  - "for /f \"tokens=*\" %%a in ( \'python returnVersion.py\' ) do ( set VERSION=%%a )"
  - "@echo off"
  - "@echo %VERSION%> version.txt"
  - "@echo on"
  - "cd ..\\"
  
  # download parameter def files for installer
  - mkdir Parameters
  - ps: Start-FileDownload 'http://autotest.ardupilot.org/Parameters/APMrover2/apm.pdef.xml' -FileName 'Parameters\APMrover2.xml'
  - ps: Start-FileDownload  'http://autotest.ardupilot.org/Parameters/ArduCopter/apm.pdef.xml' -FileName 'Parameters\ArduCopter.xml'
  - ps: Start-FileDownload 'http://autotest.ardupilot.org/Parameters/ArduPlane/apm.pdef.xml' -FileName 'Parameters\ArduPlane.xml'
  - ps: Start-FileDownload 'http://autotest.ardupilot.org/Parameters/ArduSub/apm.pdef.xml' -FileName 'Parameters\ArduSub.xml'
  - ps: Start-FileDownload 'http://autotest.ardupilot.org/Parameters/AntennaTracker/apm.pdef.xml' -FileName 'Parameters\AntennaTracker.xml'
  - ps: Start-FileDownload  'http://autotest.ardupilot.org/APMrover2-defaults.parm' -FileName 'Parameters\APMrover2-defaults.parm'
  - ps: Start-FileDownload 'http://autotest.ardupilot.org/ArduCopter-defaults.parm' -FileName 'Parameters\ArduCopter-defaults.parm'
  - ps: Start-FileDownload 'http://autotest.ardupilot.org/ArduPlane-defaults.parm' -FileName 'Parameters\ArduPlane-defaults.parm'
  - ps: Start-FileDownload 'http://autotest.ardupilot.org/ArduSub-defaults.parm' -FileName 'Parameters\ArduSub-defaults.parm'

  #run setup
  - "cd  .\\windows\\"
  - "ISCC.exe /dMyAppVersion=%VERSION% mavproxy.iss"
  - "cd ..\\"
  
for:
  -
    branches:
      only: 
        - master
    artifacts:
    - path: MAVProxy\dist\
      name: WindowsCompiledFiles
    - path: windows\Output\
      name: WindowsInstaller

#on_success:
#  - TODO: upload the content of dist/*.whl to a public wheelhouse
#

on_finish:
  # Upload test results to AppVeyor
